# document_AIKIF.py written by Duncan Murray 18/4/2014
# All Python Program Statistics
# 26/08/2014 : Files =  110  Bytes =  377221  Lines =  10694  Lines of Code =  8836
# 30/10/2014 : Files =  127  Bytes =  444760  Lines =  12595  Lines of Code =  10409

import sys
import os
sys.path.append('..')

import programs as mod_prg
import config as mod_cfg
import aikif.lib.cls_filelist as mod_fl
import aikif.lib.cls_file as mod_file

def main():
    """
    Example of self documenting (of sorts) code, via aikif.
    Simply call functions like below to build an overview 
    which has metadata automatically updated.
    """
    document_programs(mod_cfg.fldrs['root_path'])
    
    
    
def document_programs(fldr):
    """
    Document a subset of all programs with purpose (and intent)
    """
    p = mod_prg.Programs('AIKIF Programs', fldr)
    p.comment('program.py', 'collects list of aikif programs to show progress and allows comments to be added to each file')
    p.comment('cls_file_mapping.py', 'uses ontology to get list of files to save data')
    p.comment('index.py', 'rebuilds indexes')
    

    p.comment('view.py', 'view the data in AIKIF')
    p.comment('AIKIF_utils.py', 'utils for getting standard file structures (soon to be deprecated)')
    p.comment('AI.py', 'original main entry point - soon to be deprecated')
    p.comment('add.py', 'command line utility to add information - not yet implemented')
    p.comment('dataTools.py', 'data tools to manage database access')
    p.comment('AIKIF_create.py', 'creates default structures with test data')
    p.comment('generateTestData.py', 'Tool to generate various test data')
    p.comment('processRawData.py', 'calls various sub tasks to collect raw data')
    p.comment('loadInfoCourseLectures.py', 'loads course lecture notes into AIKIF')
    p.comment('loadPIM_Filelist.py', 'loads generic filelists into AIKIF - indexing not implemented')
    p.comment('loadCountry_Gdeltproject.py', 'sample load - loads country data into AIKIF')
    p.comment('loadPIM_shoppingList.py', 'sample data - loads a users shopping list into AIKIF')
    p.comment('security.py', 'future module to handle security and privacy settings')


    p.list()	# get list of all programs
    p.save()
    p.collect_program_info('progress.md')


def get_list_of_applications():
    """
    Get list of applications
    """
    apps = mod_prg.Programs('Applications', 'C:\\apps')
    fl = mod_fl.FileList(['C:\\apps'], ['*.exe'], ["\\bk\\"])
    for file in fl.get_list():
        apps.add(file, 'autogenerated list')
    apps.list()
    apps.save()


if __name__ == '__main__': 
    main()