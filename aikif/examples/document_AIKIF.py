# document_AIKIF.py written by Duncan Murray 18/4/2014
# All Python Program Statistics
# 26/08/2014 : Files =  110  Bytes =  377221  Lines =  10694  Lines of Code =  8836
# 30/10/2014 : Files =  127  Bytes =  444760  Lines =  12595  Lines of Code =  10409

import sys
import os
sys.path.append('..')

import programs as mod_prg
import config as mod_cfg
import aikif.lib.cls_filelist as mod_fl
import aikif.lib.cls_file as mod_file

def main():
    """
    Example of self documenting (of sorts) code, via aikif.
    Simply call functions like below to build an overview 
    which has metadata automatically updated.
    """
    document_programs(mod_cfg.fldrs['root_path'])
    
    
    
def document_programs(fldr):
    """
    Document a subset of all programs with purpose (and intent)
    """
    p = mod_prg.Programs('AIKIF Programs', fldr)
    p.comment('programs.py', 'collects list of aikif programs to show progress and allows comments to be added to each file')
    p.comment('cls_file_mapping.py', 'uses ontology to get list of files to save data')
    p.comment('index.py', 'rebuilds indexes')
    

    p.comment('view.py', 'view the data in AIKIF - to be deprecated')
    p.comment('dataTools.py', 'data tools to manage database access')
    p.comment('AIKIF_create.py', 'creates default structures with test data - to be deprecated')
    p.comment('generateTestData.py', 'Tool to generate various test data')
    p.comment('processRawData.py', 'calls various sub tasks to collect raw data')
    p.comment('loadInfoCourseLectures.py', 'loads course lecture notes into AIKIF')
    p.comment('loadPIM_Filelist.py', 'loads generic filelists into AIKIF - indexing not implemented')
    p.comment('loadCountry_Gdeltproject.py', 'sample load - loads country data into AIKIF')
    p.comment('loadPIM_shoppingList.py', 'sample data - loads a users shopping list into AIKIF')
    p.comment('security.py', 'future module to handle security and privacy settings')

    p.comment('bias.py', 'weight the validity of source data based on location, person, timing')
    p.comment('cls_collect_files.py', 'duplicate - see agent filelist collecting')
    p.comment('config.py', 'central point for settings in AIKIF')
    p.comment('cls_log.py', 'logging function to map to standard outputs. Almost provides auto aggregation')
    p.comment('create_word_lists.py', 'read ontology files to generate list of nouns and verbs (to be deprecated)')
    p.comment('mapper.py', 'maps business rules and columns of source data to standard aikif logs')
    p.comment('search.py', 'command line search tool')
    p.comment('tools.py', 'uses the toolbox class to create list of programs used by aikif')
    p.comment('agents/agent.py', 'base agent class')
    p.comment('agents/test_agent.py', 'test for agent class (why is this not in /tests root folder? TODO')
    p.comment('agents/aggregate/agg_context.py', 'detects context of user and computer')
    """
    p.comment('.py', '')

    p.comment('.py', '')
    p.comment('.py', '')
    p.comment('.py', '')
    p.comment('.py', '')
    """

    p.list()	# get list of all programs
    p.save()
    p.collect_program_info('progress.md')


def get_list_of_applications():
    """
    Get list of applications
    """
    apps = mod_prg.Programs('Applications', 'C:\\apps')
    fl = mod_fl.FileList(['C:\\apps'], ['*.exe'], ["\\bk\\"])
    for file in fl.get_list():
        apps.add(file, 'autogenerated list')
    apps.list()
    apps.save()


if __name__ == '__main__': 
    main()